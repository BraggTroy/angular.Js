!function (e) {
    "use strict";
    e.module("ng-pagination", []).constant("ngPaginationConfig", {
        visiblePageCount: 5,
        firstText: "首页",
        lastText: "尾页",
        prevText: "上一页",
        nextText: "下一页",
        showIfOnePage: !1,
        showFirstLastText: !0,
        gotoText: "跳转",
        showGoto: !1
    }).factory("pagerService", function () {
        var pagerService = {
            getPageCount: function (total, pagesize) {
                var pages;
                if (total % pagesize == 0) {
                    pages = total / pagesize;
                    pages = pages == 0 ? 1 : pages;
                } else {
                    pages = Math.ceil(total / pagesize);
                }
                return pages;
            }
        };
        return pagerService;
    }).directive("pager", ["ngPaginationConfig", function (t) {
        return {
            link: function (n, a, g) {
                function i() {
                    var i = 1;
                    n.pagenums = [];
                    if (n.pageCount <= 5) {
                        for (i; i <= n.pageCount; i++) {
                            n.pagenums.push(i);
                        }
                    } else {
                        if (n.currentPage == 1) {
                            for (i; i < 6; i++) {
                                n.pagenums.push(i);
                            }
                        } else if (n.currentPage == n.pageCount) {
                            i = n.currentPage - 4;
                            for (i; i <= n.currentPage; i++) {
                                n.pagenums.push(i);
                            }
                        } else {
                            if (n.currentPage <= 3) {
                                for (i; i <= 5; i++) {
                                    n.pagenums.push(i);
                                }
                            } else if (n.currentPage + 4 > n.pageCount) {
                                i = n.pageCount - 4;
                                if (i < 1) {
                                    i = 1;
                                }
                                for (i; i <= n.pageCount; i++) {
                                    n.pagenums.push(i);
                                }
                            } else {
                                i = n.currentPage - 2;
                                for (i; i <= n.currentPage + 2; i++) {
                                    n.pagenums.push(i);
                                }
                            }
                        }
                    }
                }

                var pageSize = e.isDefined(g.visiblePageCount) ? g.visiblePageCount : t.visiblePageCount;
                n.firstText = e.isDefined(g.firstText) ? g.firstText : t.firstText,
                    n.lastText = e.isDefined(g.lastText) ? g.lastText : t.lastText,
                    n.prevText = e.isDefined(g.prevText) ? g.prevText : t.prevText,
                    n.nextText = e.isDefined(g.nextText) ? g.nextText : t.nextText,
                    n.showFirstLastText = e.isDefined(g.showFirstLastText) ? g.showFirstLastText : t.showFirstLastText,
                    n.showIfOnePage = e.isDefined(g.showIfOnePage) ? g.showIfOnePage : t.showIfOnePage,
                    n.gotoText = e.isDefined(g.gotoText) ? g.gotoText : t.gotoText,
                    n.showGoto = e.isDefined(g.showGoto) ? g.showGoto : t.showGoto, n.currentPage = 1,
                    n.pageChange = function (e) {
                        e = parseInt(e);
                        e >= 1 && e <= n.pageCount ? n.currentPage = e : n.currentPage = 1
                    }, n.keyupHanlder = function (e) {
                    var t = e.target.value, a = parseInt(t, 10);
                    if (Number.isNaN(a)) {
                        if (!e.preventDefault)return !1;
                        e.preventDefault()
                    } else a >= 1 && a <= n.pageCount || (1 > a ? e.target.value = 1 : e.target.value = n.pageCount), 13 === e.keyCode && (n.currentPage = a)
                }, n.$watch("currentPage", function () {
                    i(), n.onPageChange()
                }), n.$watch("pageCount", function () {
                    i()
                })
            },
            replace: !0,
            restrict: "E",
            scope: {pageTotal: "=", currentPage: "=", pageCount: "=", onPageChange: "&"},
            template: '<div class="row">' +
            '<div class="col-md-2 col-sm-2 col-xs-2" style="min-width: 114px;"><div class="dataTables_info" aria-live="polite">共{{pageTotal}}条，{{pageCount}}页</div></div>' +
            '<div class="col-md-10 col-sm-10 col-xs-10" ng-if="pageCount>1 || showIfOnePage" style="min-width: 570px; ">' +
            '<div class="pagination-panel">到第' +
            '<input ng-keyup="keyupHanlder($event)" ng-model="gotoPage" type="text" class="form-control input-mini input-inline input-sm" maxlenght="5" style="text-align:center; margin: 0 5px;">' +
            '页，<a href="javascript:void(0)" class="btn btn-sm default" title="goto" ng-click="pageChange(gotoPage)">跳转</a>' +
            '</div>' +
            '<div class="dataTables_paginate paging_bootstrap_full_number">' +
            '<ul class="pagination">' +
            '<li ng-click="pageChange(1)" ng-if="showFirstLastText" class="paginate_button"><a href="javascript:void(0);">{{firstText}}</a></li>' +
            '<li ng-click="pageChange(currentPage-1>0?currentPage-1:1)" class="previous"><a href="javascript:void(0);"><i class="iconfont icon-angle-left"></i></a></li>' +
            '<li ng-repeat="pagenum in pagenums track by pagenum" ng-click="pageChange(pagenum)" ng-class="{active:currentPage===pagenum}"><a href="javascript:void(0);">{{pagenum}}</a></li>' +
            '<li ng-click="pageChange(currentPage+1<=pageCount?currentPage+1:pageCount)" class="previous"><a href="javascript:void(0);"><i class="iconfont icon-angle-right"></i></a></li>' +
            '<li ng-click="pageChange(pageCount)" ng-if="showFirstLastText"><a href="javascript:void(0);">{{lastText}}</a></li>' +
            '</ul>' +
            '</div>' +
            '</div>' +
            '</div>'
        }
    }])
}(angular);